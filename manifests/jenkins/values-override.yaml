# ingress:
#   enabled: true
#   hostName: "dviross.cloud"

hostNetworking: true

controller:
  imagePullPolicy: "Always"

  image: "jenkins/jenkins"
  tag: "lts"

  # image: "514095112279.dkr.ecr.eu-central-1.amazonaws.com/jenkins_docker"
  # tag: "1.8.0"
  # imagePullSecretName: regcred
  # installPlugins: false

  jenkinsUrl: https://localhost:8080
  jenkinsAdminEmail: dviross@outlook.com
  adminUsername: dviross
  adminPassword: Aa123456

  # serviceType: LoadBalancer #NodePort

  # additionalPlugins:
  #   # - job-dsl:1.7
  #   - permissivescript-security:0.6
  #   - workflow-job:2.39
  #   # - credentials-binding:1.23
  #   # - kubernetes:1.25.7


  # javaOpts: '-Dpermissive-script-security.enabled=true'
  # podSecurityContextOverride:
  #   runAsNonRoot: true
  #   runAsUser: 1000
  #   supplementalGroups: [1000]

  JCasC:
    # securityRealm: |-
    #   local:
    #     allowsSignup: false
    #     enableCaptcha: false
    #     users:
    #     - id: "${chart-admin-username}"
    #       name: "Jenkins Admin"
    #       password: "${chart-admin-password}"
    # authorizationStrategy: |-
    #   loggedInUsersCanDoAnything:
    #     allowAnonymousRead: false

    # dfaultConfig: true

    configScripts:
      # jenkins-casc-configs: |
      #   credentials:
      #     system:
      #       domainCredentials:
      #       - credentials:
      #         - string:
      #             description: "github access token"
      #             id: "github_app_token"
      #             scope: GLOBAL
      #             secret: ${secret-credentials-token}
      #         - usernamePassword:
      #             description: "github access username password"
      #             id: "github_username_pass"
      #             password: ${secret-credentials-github-password}
      #             scope: GLOBAL
      #             username: ${secret-credentials-github-username}

      welcome-message: |
        jenkins:
          systemMessage: Welcome to Kube-Jenkins!
      # job-config: |
      #   jobs:
      #   - script: >
      #       folder('testjobs')
      #   - script: >
      #       pipelineJob('testjobs/default-agent') {
      #         definition {
      #           cps {
      #             script("""\
      #             pipeline {
      #               agent {
      #                 kubernetes {
      #                   yaml '''
      #                     apiVersion: v1
      #                     kind: Pod
      #                     metadata:
      #                       labels:
      #                         purpose: jenkins-agent
      #                     spec:
      #                       containers:
      #                       - name: postgres
      #                         image: postgres:latest
      #                         command:
      #                         - cat
      #                         tty: true
      #                     '''
      #                 }
      #               }
      #               stages {
      #                 stage('Test it out') {
      #                   steps {
      #                     container('postgres') {
      #                       sh 'pwd'
      #                     }
      #                   }
      #                 }
      #               }
      #             }
      #             """.stripIndent())
      #             sandbox()
      #           }
      #         }
      #       }

# rbac:
#   create: true
# ServiceLabels:
#   expose: true